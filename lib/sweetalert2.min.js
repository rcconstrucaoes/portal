// RC Construções - SweetAlert Helper v5.0
// Wrapper customizado para SweetAlert2 com tema e configurações da RC

class RCSweetAlert {
    constructor() {
        this.defaultConfig = {
            buttonsStyling: false,
            customClass: {
                confirmButton: 'btn btn-primary',
                cancelButton: 'btn btn-ghost',
                denyButton: 'btn btn-danger'
            },
            background: '#1A1A2E',
            color: '#FFFFFF',
            confirmButtonColor: '#FF6B35',
            cancelButtonColor: '#6C757D',
            denyButtonColor: '#FF4757'
        };
        
        this.init();
    }

    init() {
        // Verifica se SweetAlert2 está disponível
        if (typeof Swal === 'undefined') {
            console.error('SweetAlert2 não está carregado. Adicione o CDN ao HTML.');
            return false;
        }

        // Configurações globais
        this.configureMixin();
        console.log('✅ RC SweetAlert Helper inicializado!');
        return true;
    }

    configureMixin() {
        // Cria mixin com configurações padrão da RC
        this.Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            background: '#1A1A2E',
            color: '#FFFFFF',
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer);
                toast.addEventListener('mouseleave', Swal.resumeTimer);
            }
        });

        this.Modal = Swal.mixin({
            ...this.defaultConfig,
            showCancelButton: true,
            confirmButtonText: 'Confirmar',
            cancelButtonText: 'Cancelar'
        });
    }

    // ===== MÉTODOS DE CONVENIÊNCIA =====

    /**
     * Toast de sucesso
     */
    success(message, title = 'Sucesso!') {
        return this.Toast.fire({
            icon: 'success',
            title: title,
            text: message
        });
    }

    /**
     * Toast de erro
     */
    error(message, title = 'Erro!') {
        return this.Toast.fire({
            icon: 'error',
            title: title,
            text: message,
            timer: 5000
        });
    }

    /**
     * Toast de aviso
     */
    warning(message, title = 'Atenção!') {
        return this.Toast.fire({
            icon: 'warning',
            title: title,
            text: message,
            timer: 4000
        });
    }

    /**
     * Toast de informação
     */
    info(message, title = 'Informação') {
        return this.Toast.fire({
            icon: 'info',
            title: title,
            text: message
        });
    }

    // ===== MODAIS DE CONFIRMAÇÃO =====

    /**
     * Confirmação simples
     */
    async confirm(title, text, confirmText = 'Sim', cancelText = 'Não') {
        const result = await this.Modal.fire({
            title: title,
            text: text,
            icon: 'question',
            confirmButtonText: confirmText,
            cancelButtonText: cancelText
        });

        return result.isConfirmed;
    }

    /**
     * Confirmação de exclusão
     */
    async confirmDelete(itemName = 'este item') {
        const result = await Swal.fire({
            ...this.defaultConfig,
            title: 'Confirmar Exclusão',
            text: `Tem certeza que deseja excluir ${itemName}?`,
            html: `
                <p>Tem certeza que deseja excluir <strong>${itemName}</strong>?</p>
                <p class="text-danger small">⚠️ Esta ação não pode ser desfeita!</p>
            `,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Sim, excluir',
            cancelButtonText: 'Cancelar',
            confirmButtonColor: '#FF4757',
            focusCancel: true,
            reverseButtons: true
        });

        return result.isConfirmed;
    }

    /**
     * Confirmação com três opções
     */
    async confirmWithOptions(title, text, confirmText, denyText, cancelText = 'Cancelar') {
        const result = await Swal.fire({
            ...this.defaultConfig,
            title: title,
            text: text,
            icon: 'question',
            showDenyButton: true,
            showCancelButton: true,
            confirmButtonText: confirmText,
            denyButtonText: denyText,
            cancelButtonText: cancelText
        });

        if (result.isConfirmed) return 'confirm';
        if (result.isDenied) return 'deny';
        return 'cancel';
    }

    // ===== FORMULÁRIOS E INPUTS =====

    /**
     * Input simples
     */
    async input(title, placeholder = '', defaultValue = '') {
        const result = await Swal.fire({
            ...this.defaultConfig,
            title: title,
            input: 'text',
            inputPlaceholder: placeholder,
            inputValue: defaultValue,
            showCancelButton: true,
            confirmButtonText: 'Confirmar',
            cancelButtonText: 'Cancelar',
            inputValidator: (value) => {
                if (!value.trim()) {
                    return 'Campo obrigatório!';
                }
            }
        });

        return result.isConfirmed ? result.value : null;
    }

    /**
     * Input de valor monetário
     */
    async inputMoney(title, placeholder = 'R$ 0,00', defaultValue = '') {
        const result = await Swal.fire({
            ...this.defaultConfig,
            title: title,
            input: 'text',
            inputPlaceholder: placeholder,
            inputValue: defaultValue,
            showCancelButton: true,
            confirmButtonText: 'Confirmar',
            cancelButtonText: 'Cancelar',
            didOpen: () => {
                const input = Swal.getInput();
                input.addEventListener('input', (e) => {
                    e.target.value = this.formatMoneyInput(e.target.value);
                });
            },
            inputValidator: (value) => {
                if (!value.trim()) {
                    return 'Valor obrigatório!';
                }
                const numericValue = this.parseMoney(value);
                if (numericValue <= 0) {
                    return 'Valor deve ser maior que zero!';
                }
            }
        });

        return result.isConfirmed ? this.parseMoney(result.value) : null;
    }

    /**
     * Seleção de opções
     */
    async select(title, options, defaultValue = '') {
        const selectOptions = {};
        options.forEach(option => {
            selectOptions[option.value] = option.label;
        });

        const result = await Swal.fire({
            ...this.defaultConfig,
            title: title,
            input: 'select',
            inputOptions: selectOptions,
            inputValue: defaultValue,
            showCancelButton: true,
            confirmButtonText: 'Confirmar',
            cancelButtonText: 'Cancelar',
            inputValidator: (value) => {
                if (!value) {
                    return 'Selecione uma opção!';
                }
            }
        });

        return result.isConfirmed ? result.value : null;
    }

    /**
     * Textarea
     */
    async textarea(title, placeholder = '', defaultValue = '') {
        const result = await Swal.fire({
            ...this.defaultConfig,
            title: title,
            input: 'textarea',
            inputPlaceholder: placeholder,
            inputValue: defaultValue,
            showCancelButton: true,
            confirmButtonText: 'Confirmar',
            cancelButtonText: 'Cancelar',
            inputValidator: (value) => {
                if (!value.trim()) {
                    return 'Campo obrigatório!';
                }
            }
        });

        return result.isConfirmed ? result.value : null;
    }

    // ===== MODAIS ESPECÍFICOS DO SISTEMA =====

    /**
     * Modal de novo cliente rápido
     */
    async quickAddClient() {
        const { value: formValues } = await Swal.fire({
            ...this.defaultConfig,
            title: 'Cadastro Rápido de Cliente',
            html: `
                <div class="quick-form">
                    <input id="client-name" type="text" class="swal2-input" placeholder="Nome completo">
                    <input id="client-cpf" type="text" class="swal2-input" placeholder="CPF">
                    <input id="client-phone" type="text" class="swal2-input" placeholder="Telefone">
                    <input id="client-email" type="email" class="swal2-input" placeholder="E-mail (opcional)">
                </div>
            `,
            confirmButtonText: 'Cadastrar Cliente',
            cancelButtonText: 'Cancelar',
            showCancelButton: true,
            preConfirm: () => {
                const name = document.getElementById('client-name').value;
                const cpf = document.getElementById('client-cpf').value;
                const phone = document.getElementById('client-phone').value;
                const email = document.getElementById('client-email').value;

                if (!name.trim()) {
                    Swal.showValidationMessage('Nome é obrigatório');
                    return false;
                }
                if (!cpf.trim()) {
                    Swal.showValidationMessage('CPF é obrigatório');
                    return false;
                }
                if (!phone.trim()) {
                    Swal.showValidationMessage('Telefone é obrigatório');
                    return false;
                }

                return { name: name.trim(), cpf, phone, email };
            }
        });

        return formValues || null;
    }

    /**
     * Modal de backup/exportação
     */
    async backupOptions() {
        const result = await Swal.fire({
            ...this.defaultConfig,
            title: 'Backup dos Dados',
            text: 'Escolha o tipo de backup que deseja realizar:',
            icon: 'info',
            showDenyButton: true,
            showCancelButton: true,
            confirmButtonText: 'Backup Completo',
            denyButtonText: 'Apenas Clientes',
            cancelButtonText: 'Cancelar',
            footer: '<small>O backup será baixado como arquivo JSON</small>'
        });

        if (result.isConfirmed) return 'full';
        if (result.isDenied) return 'clients';
        return null;
    }

    /**
     * Modal de progresso
     */
    showProgress(title, text = 'Processando...') {
        return Swal.fire({
            title: title,
            text: text,
            allowOutsideClick: false,
            allowEscapeKey: false,
            showConfirmButton: false,
            background: '#1A1A2E',
            color: '#FFFFFF',
            didOpen: () => {
                Swal.showLoading();
            }
        });
    }

    /**
     * Atualiza progresso
     */
    updateProgress(text) {
        Swal.update({
            text: text
        });
    }

    /**
     * Fecha modal de progresso
     */
    closeProgress() {
        Swal.close();
    }

    // ===== NOTIFICAÇÕES ESPECÍFICAS DO SISTEMA =====

    /**
     * Sucesso de salvamento
     */
    savedSuccess(itemType = 'item') {
        return this.success(`${itemType} salvo com sucesso!`);
    }

    /**
     * Sucesso de exclusão
     */
    deletedSuccess(itemType = 'item') {
        return this.success(`${itemType} excluído com sucesso!`);
    }

    /**
     * Erro de conexão
     */
    connectionError() {
        return this.error('Erro de conexão. Verifique sua internet e tente novamente.');
    }

    /**
     * Erro de validação
     */
    validationError(message) {
        return this.warning(message, 'Dados Inválidos');
    }

    /**
     * Feature em desenvolvimento
     */
    featureInDevelopment() {
        return this.info('Esta funcionalidade está em desenvolvimento e estará disponível em breve!', 'Em Breve');
    }

    /**
     * Aviso de dados demo
     */
    demoDataWarning() {
        return Swal.fire({
            ...this.defaultConfig,
            title: 'Dados de Demonstração',
            html: `
                <p>Você está visualizando dados de demonstração.</p>
                <p><strong>Estes dados são apenas para fins de teste e podem ser alterados a qualquer momento.</strong></p>
            `,
            icon: 'info',
            confirmButtonText: 'Entendi',
            footer: '<small>💡 Para usar dados reais, comece cadastrando seus próprios clientes</small>'
        });
    }

    // ===== HELPERS =====

    formatMoneyInput(value) {
        let numericValue = value.replace(/\D/g, '');
        if (numericValue.length > 0) {
            const number = parseInt(numericValue) / 100;
            return number.toLocaleString('pt-BR', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            });
        }
        return '';
    }

    parseMoney(value) {
        if (!value) return 0;
        return parseFloat(value.replace(/\./g, '').replace(',', '.')) || 0;
    }

    // ===== TEMAS =====

    /**
     * Aplica tema claro
     */
    setLightTheme() {
        this.defaultConfig.background = '#FFFFFF';
        this.defaultConfig.color = '#212529';
        this.configureMixin();
    }

    /**
     * Aplica tema escuro
     */
    setDarkTheme() {
        this.defaultConfig.background = '#1A1A2E';
        this.defaultConfig.color = '#FFFFFF';
        this.configureMixin();
    }

    // ===== WRAPPER DIRETO PARA SWAL =====

    /**
     * Acesso direto ao Swal para casos especiais
     */
    fire(options) {
        return Swal.fire({
            ...this.defaultConfig,
            ...options
        });
    }

    /**
     * Toast personalizado
     */
    toast(options) {
        return this.Toast.fire(options);
    }
}

// Inicialização automática
document.addEventListener('DOMContentLoaded', () => {
    window.RCAlert = new RCSweetAlert();
    
    // Aliases para compatibilidade com o app principal
    if (window.app) {
        window.app.showSuccess = (message) => window.RCAlert.success(message);
        window.app.showError = (title, message) => window.RCAlert.error(message, title);
        window.app.showToast = (message, type) => {
            switch (type) {
                case 'success': return window.RCAlert.success(message);
                case 'error': return window.RCAlert.error(message);
                case 'warning': return window.RCAlert.warning(message);
                case 'info': return window.RCAlert.info(message);
                default: return window.RCAlert.info(message);
            }
        };
    }
});

// Instância global
window.RCAlert = null; // Será inicializada no DOMContentLoaded
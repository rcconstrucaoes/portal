/*! Dexie.js v3.2.4 - Minimal build - https://dexie.org
 * MIT License
 * (c) 2014-2023 David Fahlander
 */
var Dexie=function(){function e(t){var n=this;n._dbName=t,n._db=null,n._version=null,n._stores={},n._initPromise=null,n._closed=!1,n.version=function(e){return n._version=e,n},n.stores=function(e){return n._stores=e,n},n.open=function(){if(n._closed)throw new Error("Database already closed");if(n._initPromise)return n._initPromise;return n._initPromise=n._init()},n._init=function(){return new Promise(function(e,t){var r,indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB;if(!indexedDB)return t(new Error("IndexedDB not supported"));var o=indexedDB.open(n._dbName,n._version);o.onerror=function(i){t(i.target.error)},o.onupgradeneeded=function(i){r=i.target.result;for(var s in n._stores)if(r.objectStoreNames.contains(s))r.deleteObjectStore(s);r.createObjectStore(s,{keyPath:n._stores[s]})},o.onsuccess=function(i){r=i.target.result,n._db=r,e(n)};o.onblocked=function(){t(new Error("Dexie: blocked by another connection"))}})},n.table=function(e){if(!n._db)throw new Error("Database not opened");if(!n._db.objectStoreNames.contains(e))throw new Error("Table "+e+" not found");return new Dexie.Table(n._db,e)},n.close=function(){n._db&&n._db.close(),n._closed=!0}}e.prototype.delete=function(){var e=this;return new Promise(function(t,r){var i=window.indexedDB.deleteDatabase(e._dbName);i.onsuccess=function(){t()},i.onerror=function(n){r(n.target.error)}})};e.Table=function(db,storeName){this._db=db,this._storeName=storeName};e.Table.prototype.add=function(e){var t=this;return new Promise(function(n,r){var i=t._db.transaction([t._storeName],"readwrite").objectStore(t._storeName).add(e);i.onsuccess=function(){n(i.result)},i.onerror=function(o){r(o.target.error)}})};e.Table.prototype.put=function(e){var t=this;return new Promise(function(n,r){var i=t._db.transaction([t._storeName],"readwrite").objectStore(t._storeName).put(e);i.onsuccess=function(){n(i.result)},i.onerror=function(o){r(o.target.error)}})};e.Table.prototype.get=function(e){var t=this;return new Promise(function(n,r){var i=t._db.transaction([t._storeName]).objectStore(t._storeName).get(e);i.onsuccess=function(){n(i.result)},i.onerror=function(o){r(o.target.error)}})};e.Table.prototype.delete=function(e){var t=this;return new Promise(function(n,r){var i=t._db.transaction([t._storeName],"readwrite").objectStore(t._storeName)["delete"](e);i.onsuccess=function(){n()},i.onerror=function(o){r(o.target.error)}})};e.Table.prototype.where=function(key){return new Dexie.WhereClause(this._db,this._storeName,key)};e.WhereClause=function(db,storeName,key){this._db=db,this._storeName=storeName,this._key=key};e.WhereClause.prototype.equals=function(value){var t=this;return{toArray:function(){return new Promise(function(n,r){var i=[],o=t._db.transaction([t._storeName]).objectStore(t._storeName).index(t._key).openCursor(IDBKeyRange.only(value));o.onsuccess=function(s){var a=s.target.result;if(a)i.push(a.value),a.continue();else n(i)},o.onerror=function(s){r(s.target.error)}})}}};e.prototype.transaction=function(mode,stores,fn){var t=this;if(!t._db)throw new Error("Database not opened");var r=t._db.transaction(stores,mode),results={},tableObjs={};stores.forEach(function(s){tableObjs[s]=new Dexie.Table(t._db,s)});return fn(tableObjs,r)};return e}();
window.Dexie=Dexie;
# RC Construções - Configuração Nginx Otimizada para Docker
# Versão 5.1 - Revisado e Aprimorado
# Este arquivo configura o Nginx como servidor web e proxy reverso para a aplicação RC Construções.

# =======================================
# CONFIGURAÇÕES GLOBAIS
# =======================================

# Usuário que executa o Nginx (nginx é o padrão em imagens Alpine)
user nginx;

# Número de processos worker. 'auto' detecta o número de CPUs.
# Pode ser sobrescrito via variável de ambiente NGINX_WORKER_PROCESSES no Docker Compose.
worker_processes auto; #

# Arquivo de PID (Process ID)
pid /var/run/nginx.pid; #

# Configurações de log de erro global
error_log /var/log/nginx/error.log warn;

# =======================================
# CONFIGURAÇÕES DOS EVENTOS
# =======================================
events {
    # Número máximo de conexões simultâneas por worker process.
    # Pode ser sobrescrito via variável de ambiente NGINX_WORKER_CONNECTIONS.
    worker_connections 1024; #
    
    # Usa epoll para melhor performance no Linux
    use epoll; #
    
    # Aceita múltiplas conexões simultaneamente
    multi_accept on; #
}

# =======================================
# CONFIGURAÇÕES HTTP
# =======================================
http {
    # ====== TIPOS DE ARQUIVO E ENCODING ======
    include /etc/nginx/mime.types; #
    default_type application/octet-stream; #
    
    # Charset padrão
    charset utf-8; #
    
    # ====== LOGS ======
    # Formato de log de acesso personalizado para melhor análise.
    # 'main' é o formato usado pelos access_log directives.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time ua="$upstream_addr" us=$upstream_status '
                    'cs=$connection $connection_requests tr=$bytes_sent be=$request_length'; #
    
    # Log de acesso para o host virtual padrão
    access_log /var/log/nginx/access.log main; #
    
    # ====== OTIMIZAÇÃO DE PERFORMANCE (GZIP) ======
    gzip on; #
    gzip_vary on; #
    gzip_proxied any; #
    gzip_comp_level 6; # Nível de compressão (1-9)
    gzip_buffers 16 8k; #
    gzip_http_version 1.1; #
    # Tipos de MIME para os quais o Gzip deve ser ativado.
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml; #
    
    # ====== TEMPO LIMITE ======
    # Tempos limite para conexões e leituras
    client_body_timeout 12s;
    client_header_timeout 12s;
    keepalive_timeout 15s;
    send_timeout 10s;

    # ====== UPLOAD DE ARQUIVOS ======
    # Aumenta o tamanho máximo do corpo da requisição para uploads
    client_max_body_size 50M; # Ex: 50 megabytes

    # =======================================
    # SERVIDORES VIRTUAIS
    # =======================================

    # ====== SERVIDOR HTTP (Porta 80) ======
    server {
        listen 80; #
        listen [::]:80; #
        server_name localhost; # Pode ser o domínio (ex: rc-construcoes.com)
        
        # Redirecionamento HTTP para HTTPS (DESCOMENTE em produção se usar SSL)
        # return 301 https://$host$request_uri;

        # Root para servir arquivos estáticos do frontend (copia da stage build do Dockerfile)
        root /usr/share/nginx/html;
        index index.html index.htm; # Arquivos de índice

        # Cabeçalhos de segurança básicos (adicional ao Helmet)
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;

        # Regra para SPA (Single Page Application): fallback para index.html
        # Tenta servir o arquivo diretamente; se não encontrar, tenta o diretório;
        # por fim, serve index.html para rotas do lado do cliente.
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Proxy para a API do Backend
        location /api/ {
            proxy_pass http://backend:3000; # Encaminha para o serviço 'backend' no Docker Compose
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 90s; # Tempo limite para ler resposta do backend
            proxy_send_timeout 90s; # Tempo limite para enviar requisição ao backend
            # Opcional: WebSocket proxying para Socket.IO
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Opcional: Rota para verificar a saúde do Nginx
        location /nginx-health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 'healthy';
        }
    }

    # ====== SERVIDOR HTTPS (Porta 443 - DESCOMENTE e CONFIGURE para PRODUÇÃO) ======
    # Este bloco é um exemplo para HTTPS com SSL/TLS.
    # Você precisará obter e montar seus certificados SSL (ex: via Certbot).
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name rc-construcoes.com www.rc-construcoes.com; # Seu domínio
    #     
    #     # Certificados SSL - SUBSTITUA COM SEUS CAMINHOS REAIS E NOMES DE ARQUIVO
    #     # Exemplo com certificados montados via volume Docker (Certbot)
    #     ssl_certificate /etc/nginx/ssl/live/rc-construcoes.com/fullchain.pem;
    #     ssl_certificate_key /etc/nginx/ssl/live/rc-construcoes.com/privkey.pem;
    #     
    #     # Configurações SSL modernas para segurança (HTTPS)
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_prefer_server_ciphers off;
    #     ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
    #     ssl_session_timeout 1d;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_tickets off;
    #     ssl_dhparam /etc/nginx/ssl/dhparam.pem; # Gerar com: openssl dhparam -out dhparam.pem 2048
    #
    #     # HSTS (HTTP Strict Transport Security)
    #     # Garante que os navegadores se conectem apenas via HTTPS por um período
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    #     
    #     # Inclua todas as configurações do servidor HTTP aqui (root, index, location / etc.)
    #     root /usr/share/nginx/html;
    #     index index.html index.htm;
    #
    #     location / {
    #         try_files $uri $uri/ /index.html;
    #     }
    #
    #     location /api/ {
    #         proxy_pass http://backend:3000;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_read_timeout 90s;
    #         proxy_send_timeout 90s;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection "upgrade";
    #     }
    # }

    # =======================================
    # Páginas de Erro Customizadas (Opcional)
    # =======================================
    # error_page 404 /404.html;
    # location = /404.html {
    #     internal;
    # }
    # error_page 500 502 503 504 /50x.html;
    # location = /50x.html {
    #     internal;
    # }
}
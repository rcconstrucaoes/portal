/**
 * RC ConstruÃ§Ãµes - Testes UnitÃ¡rios
 * MÃ³dulo de GrÃ¡ficos (ChartsModule)
 * VersÃ£o 5.1 - Revisado e Aprimorado
 */

// Mocka a biblioteca Chart.js globalmente, pois ela Ã© uma dependÃªncia visual
// Usaremos um mock mais sofisticado para simular a instÃ¢ncia e seus mÃ©todos
const mockChartInstance = {
  destroy: jest.fn(),
  update: jest.fn(),
  data: {},
  options: {},
};

const mockChartConstructor = jest.fn().mockImplementation(() => mockChartInstance);

// Mocka Chart.js.getChart para que possa retornar instÃ¢ncias existentes
const mockChartGetChart = jest.fn(() => null); // Retorna null por padrÃ£o (nenhuma instÃ¢ncia)

// Mocka Chart.helpers.merge para garantir que a mesclagem de opÃ§Ãµes funcione
const mockChartHelpersMerge = jest.fn((...args) => Object.assign({}, ...args)); // Simples Object.assign

jest.mock('chart.js', () => ({
  Chart: mockChartConstructor,
  getChart: mockChartGetChart,
  helpers: {
    merge: mockChartHelpersMerge,
  },
}));

// Mocka o SystemLogger
const mockSystemLogger = {
  getAppLogger: jest.fn(() => ({
    info: jest.fn(),
    warn: jest.fn(),
    error: jest.fn(),
    debug: jest.fn(),
    success: jest.fn(),
  })),
};
global.SystemLogger = mockSystemLogger;

// Mocka SystemEventHandler (se ChartsModule o usar para eventos)
const mockSystemEventHandler = {
  on: jest.fn(),
  emit: jest.fn(),
};
global.SystemEventHandler = mockSystemEventHandler;

// Mocka UtilsManager (se ChartsModule o usar para formataÃ§Ã£o)
const mockUtilsManager = {
  formatDate: jest.fn((date, format) => '2025-07-30'),
  formatCurrency: jest.fn((amount) => `R$ ${amount.toFixed(2).replace('.', ',')}`),
};
global.UtilsManager = mockUtilsManager;


// Importa o mÃ³dulo Charts real para teste
const ChartsModule = require('../../js/core/charts');

describe('ChartsModule (Unit Tests)', () => {
  let chartsInstance; // A instÃ¢ncia do ChartsModule

  // Mock de um elemento canvas HTML
  let mockCanvasElement;
  let mockCanvasContext;

  beforeEach(async () => {
    // Resetar todos os mocks
    jest.clearAllMocks();

    // Resetar mocks da Chart.js
    mockChartConstructor.mockClear();
    mockChartGetChart.mockClear();
    mockChartHelpersMerge.mockClear();
    mockChartInstance.destroy.mockClear();
    mockChartInstance.update.mockClear();

    // Criar um mock de elemento canvas
    mockCanvasContext = {
      // Mocka o mÃ©todo getContext
      clearRect: jest.fn(),
      fillRect: jest.fn(),
      canvas: {}, // Simula a propriedade canvas do contexto
    };
    mockCanvasElement = {
      getContext: jest.fn(() => mockCanvasContext),
      // Mock de propriedades e mÃ©todos que Chart.js acessa
      width: 100,
      height: 100,
      clientWidth: 100,
      clientHeight: 100,
      style: {},
      id: 'testChartCanvas', // Adiciona um ID para logs
    };

    // Inicializa o ChartsModule para cada teste
    chartsInstance = ChartsModule;
    await chartsInstance.init();
  });

  describe('init()', () => {
    it('deve inicializar o ChartsModule e logar sucesso', async () => {
      // O init jÃ¡ foi chamado no beforeEach
      expect(mockSystemLogger.getAppLogger().info).toHaveBeenCalledWith(
        'ðŸ“Š Charts Module inicializado e Chart.js disponÃ­vel.'
      );
    });

    it('deve logar um erro se Chart.js nÃ£o for encontrado', async () => {
      // Simula Chart.js nÃ£o disponÃ­vel globalmente
      const originalChart = global.Chart;
      global.Chart = undefined;

      // Re-inicializa para testar o cenÃ¡rio de erro
      await chartsInstance.init();

      expect(mockSystemLogger.getAppLogger().error).toHaveBeenCalledWith(
        'Erro crÃ­tico ao inicializar Charts Module:',
        expect.any(Error)
      );
      expect(mockSystemLogger.getAppLogger().error).toHaveBeenCalledWith(
        'Falha na inicializaÃ§Ã£o do Charts Module. GrÃ¡ficos podem nÃ£o funcionar.'
      );

      global.Chart = originalChart; // Restaurar
    });
  });

  describe('createChart()', () => {
    const testChartData = {
      labels: ['A', 'B'],
      datasets: [{ label: 'Data', data: [10, 20] }],
    };

    it('deve criar um novo grÃ¡fico com sucesso', () => {
      const chart = chartsInstance.createChart(mockCanvasElement, 'bar', testChartData);

      expect(chart).toBe(mockChartInstance); // Deve retornar a instÃ¢ncia mockada
      expect(mockChartConstructor).toHaveBeenCalledTimes(1);
      expect(mockChartConstructor).toHaveBeenCalledWith(
        mockCanvasContext,
        expect.objectContaining({
          type: 'bar',
          data: testChartData,
          options: expect.any(Object), // OpÃ§Ãµes serÃ£o mescladas
        })
      );
      expect(mockSystemLogger.getAppLogger().success).toHaveBeenCalledWith(
        "GrÃ¡fico 'bar' criado com sucesso no canvas 'testChartCanvas'."
      );
    });

    it('deve mesclar opÃ§Ãµes customizadas com as opÃ§Ãµes padrÃ£o', () => {
      const customOptions = {
        plugins: { legend: { position: 'left' } },
        scales: { x: { display: false } },
      };
      chartsInstance.createChart(mockCanvasElement, 'line', testChartData, customOptions);

      expect(mockChartHelpersMerge).toHaveBeenCalledTimes(1); // Merge Ã© chamado uma vez
      // Verifica se as opÃ§Ãµes passadas para o construtor do Chart.js contÃªm a mesclagem
      const passedOptions = mockChartConstructor.mock.calls[0][1].options;
      expect(passedOptions.plugins.legend.position).toEqual('left');
      expect(passedOptions.scales.x.display).toEqual(false);
      expect(passedOptions.animation.duration).toEqual(1000); // Da defaultOptions
    });

    it('deve destruir uma instÃ¢ncia de grÃ¡fico existente antes de criar uma nova', () => {
      // Simula uma instÃ¢ncia Chart.js jÃ¡ anexada ao canvas
      mockChartGetChart.mockReturnValueOnce(mockChartInstance);

      chartsInstance.createChart(mockCanvasElement, 'line', testChartData);

      expect(mockChartGetChart).toHaveBeenCalledWith(mockCanvasElement);
      expect(mockChartInstance.destroy).toHaveBeenCalledTimes(1); // A instÃ¢ncia antiga deve ser destruÃ­da
      expect(mockChartConstructor).toHaveBeenCalledTimes(1); // Uma nova deve ser criada
    });

    it('deve retornar null e logar erro se o canvas for invÃ¡lido', () => {
      const chart = chartsInstance.createChart(null, 'bar', testChartData);

      expect(chart).toBeNull();
      expect(mockChartConstructor).not.toHaveBeenCalled();
      expect(mockSystemLogger.getAppLogger().error).toHaveBeenCalledWith(
        'Elemento canvas invÃ¡lido para criar grÃ¡fico.'
      );
    });

    it('deve retornar null e logar erro se Chart.js nÃ£o estiver disponÃ­vel', () => {
      const originalChart = global.Chart;
      global.Chart = undefined; // Simula Chart.js nÃ£o disponÃ­vel

      const chart = chartsInstance.createChart(mockCanvasElement, 'bar', testChartData);

      expect(chart).toBeNull();
      expect(mockChartConstructor).not.toHaveBeenCalled();
      expect(mockSystemLogger.getAppLogger().error).toHaveBeenCalledWith(
        'Chart.js nÃ£o estÃ¡ carregado. NÃ£o Ã© possÃ­vel criar grÃ¡fico.'
      );

      global.Chart = originalChart; // Restaurar
    });
  });

  describe('updateChartData()', () => {
    const newChartData = {
      labels: ['C', 'D'],
      datasets: [{ label: 'New Data', data: [30, 40] }],
    };

    it('deve atualizar os dados de um grÃ¡fico existente e chamar update()', () => {
      // Simula que mockChartInstance jÃ¡ Ã© um grÃ¡fico vÃ¡lido
      const success = chartsInstance.updateChartData(mockChartInstance, newChartData);

      expect(success).toBe(true);
      expect(mockChartInstance.data).toEqual(newChartData); // Dados devem ser atualizados
      expect(mockChartInstance.update).toHaveBeenCalledTimes(1); // update() deve ser chamado
      expect(mockSystemLogger.getAppLogger().info).toHaveBeenCalledWith('Dados do grÃ¡fico atualizados com sucesso.');
    });

    it('deve retornar false e logar erro se a instÃ¢ncia do grÃ¡fico for invÃ¡lida', () => {
      const success = chartsInstance.updateChartData(null, newChartData);

      expect(success).toBe(false);
      expect(mockChartInstance.update).not.toHaveBeenCalled();
      expect(mockSystemLogger.getAppLogger().warn).toHaveBeenCalledWith(
        'InstÃ¢ncia de grÃ¡fico ou novos dados invÃ¡lidos para atualizaÃ§Ã£o.'
      );
    });

    it('deve retornar false e logar erro se os novos dados forem invÃ¡lidos', () => {
      const success = chartsInstance.updateChartData(mockChartInstance, null);

      expect(success).toBe(false);
      expect(mockChartInstance.update).not.toHaveBeenCalled();
      expect(mockSystemLogger.getAppLogger().warn).toHaveBeenCalledWith(
        'InstÃ¢ncia de grÃ¡fico ou novos dados invÃ¡lidos para atualizaÃ§Ã£o.'
      );
    });

    it('deve logar um erro se a atualizaÃ§Ã£o do Chart.js falhar', () => {
        // Simula que o mÃ©todo update da instÃ¢ncia do Chart.js lanÃ§a um erro
        mockChartInstance.update.mockImplementationOnce(() => { throw new Error('Chart.js update failed'); });

        const success = chartsInstance.updateChartData(mockChartInstance, newChartData);

        expect(success).toBe(false);
        expect(mockSystemLogger.getAppLogger().error).toHaveBeenCalledWith(
            'Erro ao atualizar dados do grÃ¡fico: Chart.js update failed'
        );
    });
  });

  describe('defaultOptions', () => {
    it('deve expor as opÃ§Ãµes padrÃ£o do grÃ¡fico', () => {
      expect(chartsInstance.defaultOptions).toBeDefined();
      expect(chartsInstance.defaultOptions.responsive).toBe(true);
      expect(chartsInstance.defaultOptions.plugins.legend.position).toEqual('top');
    });
  });
});
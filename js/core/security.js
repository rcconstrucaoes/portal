/**
 * RC Constru√ß√µes - Security Manager (Revisado e Aprimorado)
 * Gerencia opera√ß√µes de seguran√ßa como hashing de senhas, criptografia e outras valida√ß√µes de seguran√ßa.
 * Aprimorado para ser robusto, integrar-se com bibliotecas de seguran√ßa e o SystemLogger.
 */

(function() {
    'use strict';

    let logger;
    let authManager; // Para cen√°rios onde a seguran√ßa interage com autentica√ß√£o (ex: JWT)
    let isInitialized = false;

    // Configura√ß√µes de seguran√ßa
    const SECURITY_CONFIG = {
        bcryptRounds: 10, // Custo de computa√ß√£o para o hashing de senhas (maior = mais seguro, mais lento)
        encryptionKeySize: 256, // Tamanho da chave de criptografia em bits (se usar AES ou similar)
        // Voc√™ pode adicionar chaves mestras aqui para criptografia de dados confidenciais
        // masterEncryptionKey: 'sua-chave-secreta-forte-aqui'
    };

    let bcryptLib; // Refer√™ncia √† biblioteca bcrypt

    /**
     * Espera por uma depend√™ncia global estar dispon√≠vel.
     * @param {string} globalName - O nome da vari√°vel global a ser esperada.
     * @returns {Promise<any>} A inst√¢ncia da depend√™ncia.
     */
    async function waitForGlobal(globalName) {
        return new Promise(resolve => {
            const checkGlobal = () => {
                if (window[globalName]) {
                    resolve(window[globalName]);
                } else {
                    setTimeout(checkGlobal, 50); // Tenta novamente em 50ms
                }
            };
            checkGlobal();
        });
    }

    /**
     * Inicializa o SecurityManager.
     * @returns {Promise<void>}
     */
    async function init() {
        if (isInitialized) {
            console.warn('SecurityManager j√° est√° inicializado. Ignorando.');
            return;
        }

        try {
            logger = await waitForGlobal('SystemLogger').then(sl => sl.getAppLogger('SecurityManager'));
            authManager = await waitForGlobal('AuthManager').catch(() => null); // AuthManager pode ser inicializado depois

            logger.info('üîê SecurityManager criado, aguardando inicializa√ß√£o...');

            // Espera pela biblioteca bcrypt.js. O nome global pode variar (dcodeIO.bcrypt, bcrypt, etc.)
            // Ajuste 'dcodeIO.bcrypt' para o nome global correto do bcrypt.min.js no seu ambiente
            bcryptLib = await Promise.race([
                waitForGlobal('dcodeIO.bcrypt'), // Nome comum para o bcrypt.js
                waitForGlobal('bcrypt'), // Outro nome poss√≠vel
                new Promise((_, reject) => setTimeout(() => reject(new Error('bcrypt.js timeout')), 3000))
            ]);

            if (!bcryptLib || typeof bcryptLib.hashSync === 'undefined') {
                throw new Error('bcrypt.js n√£o encontrado ou n√£o funcional.');
            }
            logger.success(`‚úÖ bcrypt encontrado em: ${typeof bcryptLib === 'function' ? '() => window.bcrypt' : 'objeto global'}`); // Ajuste esta linha se souber o nome exato

            // Realiza um auto-teste b√°sico para verificar se o bcrypt est√° funcionando
            if (!await runSelfTest()) {
                throw new Error('Auto-teste do SecurityManager falhou.');
            }

            // Voc√™ pode adicionar l√≥gica para carregar chaves de criptografia aqui, se aplic√°vel
            // logger.info('üîë Chaves de criptografia preparadas');

            isInitialized = true;
            logger.success('‚úÖ SecurityManager inicializado com sucesso');

        } catch (error) {
            console.error('Erro cr√≠tico ao inicializar SecurityManager:', error);
            (logger || console).error(`Falha na inicializa√ß√£o do SecurityManager: ${error.message}. Funcionalidades de seguran√ßa podem estar comprometidas.`);
            // Marcar como n√£o inicializado ou desabilitar fun√ß√µes cr√≠ticas
            isInitialized = false;
        }
    }

    /**
     * Realiza um auto-teste b√°sico para verificar a funcionalidade principal do m√≥dulo.
     * @returns {Promise<boolean>} True se o auto-teste for bem-sucedido.
     */
    async function runSelfTest() {
        logger.info('üß™ Executando auto-teste do SecurityManager...');
        try {
            const testPassword = 'mySecurePassword123!';
            const hashedPassword = await hashPassword(testPassword);
            if (!hashedPassword) {
                throw new Error('Hashing de senha retornou valor inv√°lido.');
            }
            const isMatch = await checkPassword(testPassword, hashedPassword);
            if (!isMatch) {
                throw new Error('Verifica√ß√£o de senha falhou: Hash n√£o corresponde ao original.');
            }
            logger.success('‚úÖ Auto-teste conclu√≠do com sucesso');
            return true;
        } catch (error) {
            logger.error(`‚ùå Auto-teste falhou: ${error.message}`);
            return false;
        }
    }

    /**
     * Gera um hash criptogr√°fico de uma senha.
     * @param {string} password - A senha em texto claro.
     * @returns {Promise<string|null>} O hash da senha ou null em caso de erro.
     */
    async function hashPassword(password) {
        if (!isInitialized || !bcryptLib) {
            logger.error('SecurityManager n√£o inicializado ou bcrypt.js n√£o dispon√≠vel.');
            return null;
        }
        try {
            // O bcrypt.js geralmente √© s√≠ncrono para hashing no navegador, mas o wrapper pode ser ass√≠ncrono
            // Se o bcryptLib.hash() for ass√≠ncrono, use await. Se for s√≠ncrono, remova await.
            const salt = bcryptLib.genSaltSync(SECURITY_CONFIG.bcryptRounds); // Gera um salt s√≠ncronamente
            const hash = bcryptLib.hashSync(password, salt); // Gera o hash s√≠ncronamente
            return hash;
        } catch (error) {
            logger.error(`Erro ao gerar hash da senha: ${error.message}`);
            return null;
        }
    }

    /**
     * Compara uma senha em texto claro com um hash.
     * @param {string} password - A senha em texto claro.
     * @param {string} hash - O hash a ser comparado.
     * @returns {Promise<boolean>} True se a senha corresponder ao hash, false caso contr√°rio.
     */
    async function checkPassword(password, hash) {
        if (!isInitialized || !bcryptLib) {
            logger.error('SecurityManager n√£o inicializado ou bcrypt.js n√£o dispon√≠vel.');
            return false;
        }
        try {
            // bcrypt.js compareSync √© s√≠ncrono
            const isMatch = bcryptLib.compareSync(password, hash);
            return isMatch;
        } catch (error) {
            logger.error(`Erro ao verificar senha: ${error.message}`);
            return false;
        }
    }

    /**
     * Criptografa dados sens√≠veis.
     * Nota: A implementa√ß√£o real de criptografia (AES, etc.) exigiria uma biblioteca mais completa
     * e um mecanismo seguro de gerenciamento de chaves.
     * Esta √© uma fun√ß√£o placeholder/exemplo.
     * @param {string} data - Os dados a serem criptografados.
     * @param {string} key - A chave de criptografia.
     * @returns {string} Dados criptografados.
     */
    function encryptData(data, key) {
        if (!isInitialized) {
            logger.error('SecurityManager n√£o inicializado. N√£o √© poss√≠vel criptografar.');
            return data; // Retorna dados originais se n√£o puder criptografar
        }
        logger.warn('Fun√ß√£o encryptData √© um placeholder e n√£o implementa criptografia forte.');
        // Exemplo muito b√°sico (N√ÉO SEGURO PARA PRODU√á√ÉO):
        return btoa(data + key); // Base64 + key simples
    }

    /**
     * Descriptografa dados sens√≠veis.
     * @param {string} encryptedData - Os dados criptografados.
     * @param {string} key - A chave de criptografia.
     * @returns {string} Dados descriptografados.
     */
    function decryptData(encryptedData, key) {
        if (!isInitialized) {
            logger.error('SecurityManager n√£o inicializado. N√£o √© poss√≠vel descriptografar.');
            return encryptedData;
        }
        logger.warn('Fun√ß√£o decryptData √© um placeholder e n√£o implementa descriptografia forte.');
        // Exemplo muito b√°sico (N√ÉO SEGURO PARA PRODU√á√ÉO):
        const decoded = atob(encryptedData);
        if (decoded.endsWith(key)) {
            return decoded.slice(0, -key.length);
        }
        return encryptedData; // Retorna original se n√£o puder descriptografar ou chave incorreta
    }

    // Exp√µe a API p√∫blica do m√≥dulo
    return {
        init: init,
        hashPassword: hashPassword,
        checkPassword: checkPassword,
        encryptData: encryptData, // Fun√ß√µes de criptografia de dados (placeholder)
        decryptData: decryptData, // Fun√ß√µes de descriptografia de dados (placeholder)
        // Outras fun√ß√µes de seguran√ßa podem ser adicionadas aqui
        isReady: () => isInitialized // Verifica se o m√≥dulo foi inicializado com sucesso
    };
})();
/**
 * RC Constru√ß√µes - M√≥dulo de Migra√ß√£o de Esquema (Revisado e Aprimorado)
 * Gerencia migra√ß√µes complexas de esquema e dados para o IndexedDB usando Dexie.js.
 * Complementa o DataVersioning ao focar nas transforma√ß√µes estruturais e de dados entre vers√µes.
 * Projetado para ser robusto, configur√°vel e integrado com o SystemLogger.
 */

(function() {
    'use strict';

    let logger; // Vari√°vel para a inst√¢ncia do logger
    let databaseInstance; // A inst√¢ncia do Dexie.js
    let isInitialized = false;

    // Defina as migra√ß√µes de esquema e dados aqui.
    // Cada objeto de migra√ß√£o deve ter:
    // - version: A vers√£o para a qual esta migra√ß√£o se destina.
    // - description: Uma breve descri√ß√£o da migra√ß√£o.
    // - apply: Uma fun√ß√£o ass√≠ncrona que recebe a transa√ß√£o do Dexie (tx)
    //          e opcionalmente as inst√¢ncias do banco de dados antigo e novo.
    //          Esta fun√ß√£o deve conter a l√≥gica para migrar o esquema (se n√£o for `stores` simples)
    //          e transformar os dados de vers√µes anteriores.
    const MIGRATION_DEFINITIONS = [
        // Exemplo de Migra√ß√£o da Vers√£o 1 para a 2:
        {
            version: 2,
            description: 'Adi√ß√£o de campos *permissions em users e *tags em budgets, e nova tabela invoices.',
            apply: async (tx) => {
                logger.info('Executando migra√ß√£o de dados e esquema para v2.');

                // Exemplo 1: Adicionar um novo √≠ndice a uma tabela existente (Dexie j√° faz isso com .stores())
                // Mas se precisar de l√≥gica para dados existentes:
                // await tx.table('users').toCollection().modify(user => {
                //     if (!user.permissions) {
                //         user.permissions = ['default_user_role'];
                //     }
                // });
                // logger.debug('Campo "permissions" em "users" atualizado.');

                // Exemplo 2: Adicionar uma nova tabela (Se invoices n√£o existia na v1)
                // tx.db.version(2).stores({
                //     invoices: '++id, clientId, contractId, totalAmount, issueDate, dueDate, status, createdAt, updatedAt'
                // });
                // logger.debug('Nova tabela "invoices" criada (se ainda n√£o definida no db.version).');

                // Exemplo 3: Transformar dados (renomear campo, combinar campos)
                // await tx.table('clients').toCollection().modify(client => {
                //     if (client.oldAddressFormat) {
                //         client.address = client.oldAddressFormat.street + ', ' + client.oldAddressFormat.city;
                //         delete client.oldAddressFormat;
                //     }
                // });
                // logger.debug('Dados de "clients" transformados (ex: formato de endere√ßo).');

                // Garante que o schema da vers√£o 2 seja aplicado, se j√° n√£o foi feito pelo Database.js
                // Isso √© redundante se Database.js j√° tem db.version(2).stores(),
                // mas mostra onde a l√≥gica de migra√ß√£o de dados iria.
            }
        },
        // Exemplo de Migra√ß√£o da Vers√£o 2 para a 3 (futura):
        // {
        //     version: 3,
        //     description: 'Adi√ß√£o de campo "lastLogin" em users e migra√ß√£o de tipo de dado.',
        //     apply: async (tx) => {
        //         logger.info('Executando migra√ß√£o de dados para v3.');
        //         await tx.table('users').toCollection().modify(user => {
        //             if (typeof user.lastLogin === 'string') {
        //                 user.lastLogin = new Date(user.lastLogin).getTime(); // Converte string para timestamp
        //             }
        //             if (user.lastLogin === undefined) {
        //                 user.lastLogin = null;
        //             }
        //         });
        //     }
        // }
    ];

    /**
     * Espera por uma depend√™ncia global estar dispon√≠vel.
     * @param {string} globalName - O nome da vari√°vel global a ser esperada.
     * @returns {Promise<any>} A inst√¢ncia da depend√™ncia.
     */
    async function waitForGlobal(globalName) {
        return new Promise(resolve => {
            const checkGlobal = () => {
                if (window[globalName]) {
                    resolve(window[globalName]);
                } else {
                    setTimeout(checkGlobal, 50); // Tenta novamente em 50ms
                }
            };
            checkGlobal();
        });
    }

    /**
     * Inicializa o M√≥dulo de Migra√ß√£o de Esquema.
     * Registra as fun√ß√µes de migra√ß√£o no Dexie.js.
     * @returns {Promise<void>}
     */
    async function init() {
        if (isInitialized) {
            console.warn('SchemaMigrationManager j√° est√° inicializado. Ignorando.');
            return;
        }

        try {
            logger = await waitForGlobal('SystemLogger').then(sl => sl.getAppLogger('SchemaMigration'));
            databaseInstance = await waitForGlobal('Database').then(db => db.getInstance());

            // A l√≥gica de `db.version().stores()` e `db.version().upgrade()`
            // deve ser tratada aqui ou no `Database.js`.
            // Se o `Database.js` j√° define `db.version().stores()`,
            // este m√≥dulo pode focar apenas na l√≥gica `upgrade` mais complexa.

            // Garante que as migra√ß√µes sejam aplicadas quando necess√°rio
            registerMigrations();
            
            logger.info('üîÑ M√≥dulo de Migra√ß√£o de Esquema inicializado.');
            isInitialized = true;
        } catch (error) {
            console.error('Erro cr√≠tico ao inicializar SchemaMigrationManager:', error);
            (logger || console).error('Falha na inicializa√ß√£o do SchemaMigrationManager. Migra√ß√µes de DB podem n√£o ocorrer.');
            isInitialized = false;
        }
    }

    /**
     * Registra todas as migra√ß√µes definidas no Dexie.js.
     * As migra√ß√µes s√£o aplicadas sequencialmente pelo Dexie quando o DB √© aberto
     * e a vers√£o do DB local √© menor que a vers√£o da migra√ß√£o.
     */
    function registerMigrations() {
        if (!databaseInstance) {
            logger.error('DatabaseInstance n√£o dispon√≠vel. N√£o √© poss√≠vel registrar migra√ß√µes.');
            return;
        }

        MIGRATION_DEFINITIONS.forEach(migration => {
            // Define o schema da nova vers√£o (se houver mudan√ßas no schema)
            // √â importante que Database.js j√° tenha as defini√ß√µes base de `db.version().stores()`.
            // Este `upgrade` √© para TRANSFORMA√á√ÉO DE DADOS.
            databaseInstance.version(migration.version).upgrade(async (tx) => {
                logger.info(`Iniciando execu√ß√£o da migra√ß√£o de dados para a vers√£o ${migration.version}: ${migration.description}`);
                try {
                    await migration.apply(tx); // Passa a transa√ß√£o do Dexie para a fun√ß√£o de migra√ß√£o
                    logger.success(`Migra√ß√£o para a vers√£o ${migration.version} conclu√≠da com sucesso.`);
                } catch (error) {
                    logger.error(`Falha na migra√ß√£o de dados para a vers√£o ${migration.version}: ${error.message}`);
                    throw error; // Propaga o erro para o Dexie, que ir√° reverter a transa√ß√£o
                }
            });
            logger.debug(`Migra√ß√£o v${migration.version} registrada: "${migration.description}"`);
        });
        logger.info(`Total de ${MIGRATION_DEFINITIONS.length} migra√ß√µes registradas.`);
    }

    // Exp√µe a API p√∫blica do m√≥dulo
    return {
        init: init,
        // Voc√™ pode adicionar m√©todos para for√ßar migra√ß√µes espec√≠ficas para depura√ß√£o,
        // mas o Dexie.js geralmente gerencia isso automaticamente ao abrir o DB.
    };
})();
/**
 * RC Constru√ß√µes - M√≥dulo de Notifica√ß√µes (Revisado e Aprimorado)
 * Gerencia a exibi√ß√£o de mensagens de feedback ao usu√°rio (sucesso, erro, aviso, info).
 * Pode integrar-se com bibliotecas de terceiros (SweetAlert2) para notifica√ß√µes mais ricas
 * e gerenciar notifica√ß√µes de status (offline).
 * Aprimorado para robustez, flexibilidade e integra√ß√£o com o SystemLogger.
 */

(function() {
    'use strict';

    let logger; // Vari√°vel para a inst√¢ncia do logger
    let isInitialized = false;
    let swalAvailable = false; // Flag para verificar se SweetAlert2 est√° dispon√≠vel

    const NOTIFICATION_CONFIG = {
        defaultToastDuration: 3000, // Dura√ß√£o padr√£o para toasts em milissegundos
        position: 'bottom-end', // Posi√ß√£o padr√£o para toasts (ex: 'top-end', 'bottom-start')
        // Configura√ß√µes para a notifica√ß√£o de offline na UI (elemento HTML)
        offlineNotificationId: 'offline-notification',
        offlineIconClass: 'fas fa-wifi-slash',
        offlineMessage: 'Voc√™ est√° offline. Algumas funcionalidades podem estar limitadas.'
    };

    let offlineNotificationElement; // Refer√™ncia ao elemento da notifica√ß√£o offline

    /**
     * Espera por uma depend√™ncia global estar dispon√≠vel.
     * @param {string} globalName - O nome da vari√°vel global a ser esperada.
     * @returns {Promise<any>} A inst√¢ncia da depend√™ncia.
     */
    async function waitForGlobal(globalName) {
        return new Promise(resolve => {
            const checkGlobal = () => {
                if (window[globalName]) {
                    resolve(window[globalName]);
                } else {
                    setTimeout(checkGlobal, 50); // Tenta novamente em 50ms
                }
            };
            checkGlobal();
        });
    }

    /**
     * Inicializa o M√≥dulo de Notifica√ß√µes.
     * @returns {Promise<void>}
     */
    async function init() {
        if (isInitialized) {
            console.warn('NotificationsModule j√° est√° inicializado. Ignorando.');
            return;
        }

        try {
            logger = await waitForGlobal('SystemLogger').then(sl => sl.getAppLogger('NotificationsModule'));
            
            // Verifica se SweetAlert2 est√° dispon√≠vel
            try {
                const Swal = await Promise.race([
                    waitForGlobal('Swal'),
                    new Promise((_, reject) => setTimeout(() => reject(new Error('SweetAlert2 timeout')), 1000))
                ]);
                if (Swal && typeof Swal.fire === 'function') {
                    swalAvailable = true;
                    logger.info('SweetAlert2 detectado e dispon√≠vel para notifica√ß√µes ricas.');
                }
            } catch (e) {
                logger.warn(`SweetAlert2 n√£o dispon√≠vel para notifica√ß√µes ricas: ${e.message}. Usando notifica√ß√µes padr√£o.`);
                swalAvailable = false;
            }

            // Obt√©m a refer√™ncia para o elemento da notifica√ß√£o offline
            offlineNotificationElement = document.getElementById(NOTIFICATION_CONFIG.offlineNotificationId);
            if (offlineNotificationElement) {
                // Adiciona o √≠cone e a mensagem padr√£o, se ainda n√£o existirem
                if (!offlineNotificationElement.querySelector('i')) {
                    const icon = document.createElement('i');
                    icon.className = NOTIFICATION_CONFIG.offlineIconClass;
                    offlineNotificationElement.prepend(icon);
                }
                if (!offlineNotificationElement.querySelector('span')) {
                    const span = document.createElement('span');
                    span.textContent = NOTIFICATION_CONFIG.offlineMessage;
                    offlineNotificationElement.append(span);
                }
            } else {
                logger.warn(`Elemento de notifica√ß√£o offline com ID '${NOTIFICATION_CONFIG.offlineNotificationId}' n√£o encontrado no DOM.`);
            }

            // Configura listeners para status de rede
            window.addEventListener('online', updateOnlineStatus);
            window.addEventListener('offline', updateOnlineStatus);
            updateOnlineStatus(); // Chama uma vez para definir o status inicial

            logger.info('üîî M√≥dulo de Notifica√ß√µes inicializado.');
            isInitialized = true;
        } catch (error) {
            console.error('Erro cr√≠tico ao inicializar NotificationsModule:', error);
            (logger || console).error('Falha na inicializa√ß√£o do NotificationsModule. Notifica√ß√µes podem n√£o funcionar.');
            isInitialized = false;
        }
    }

    /**
     * Exibe uma notifica√ß√£o de sucesso.
     * @param {string} title - T√≠tulo da notifica√ß√£o.
     * @param {string} message - Mensagem da notifica√ß√£o.
     * @param {Object} [options={}] - Op√ß√µes adicionais (ex: duration para toasts).
     */
    function showSuccess(title, message, options = {}) {
        logger.info(`Notifica√ß√£o de Sucesso: ${title} - ${message}`, options);
        if (swalAvailable) {
            Swal.fire({
                title: title,
                text: message,
                icon: 'success',
                toast: options.toast || true,
                position: options.position || NOTIFICATION_CONFIG.position,
                timer: options.duration || NOTIFICATION_CONFIG.defaultToastDuration,
                timerProgressBar: true,
                showConfirmButton: false,
                ...options // Sobrescreve com op√ß√µes customizadas
            });
        } else {
            // Fallback para notifica√ß√£o simples ou log
            showFallbackNotification(title, message, 'success', options.duration);
        }
    }

    /**
     * Exibe uma notifica√ß√£o de erro.
     * @param {string} title - T√≠tulo da notifica√ß√£o.
     * @param {string} message - Mensagem da notifica√ß√£o.
     * @param {Object} [options={}] - Op√ß√µes adicionais.
     */
    function showError(title, message, options = {}) {
        logger.error(`Notifica√ß√£o de Erro: ${title} - ${message}`, options);
        if (swalAvailable) {
            Swal.fire({
                title: title,
                text: message,
                icon: 'error',
                toast: options.toast || true,
                position: options.position || NOTIFICATION_CONFIG.position,
                timer: options.toast ? (options.duration || NOTIFICATION_CONFIG.defaultToastDuration * 2) : undefined, // Erros duram mais
                timerProgressBar: options.toast || false,
                showConfirmButton: options.toast ? false : true, // Bot√£o de confirma√ß√£o para erros n√£o-toast
                ...options
            });
        } else {
            showFallbackNotification(title, message, 'error', options.duration);
        }
    }

    /**
     * Exibe uma notifica√ß√£o de aviso.
     * @param {string} title - T√≠tulo da notifica√ß√£o.
     * @param {string} message - Mensagem da notifica√ß√£o.
     * @param {Object} [options={}] - Op√ß√µes adicionais.
     */
    function showWarning(title, message, options = {}) {
        logger.warn(`Notifica√ß√£o de Aviso: ${title} - ${message}`, options);
        if (swalAvailable) {
            Swal.fire({
                title: title,
                text: message,
                icon: 'warning',
                toast: options.toast || true,
                position: options.position || NOTIFICATION_CONFIG.position,
                timer: options.duration || NOTIFICATION_CONFIG.defaultToastDuration,
                timerProgressBar: true,
                showConfirmButton: false,
                ...options
            });
        } else {
            showFallbackNotification(title, message, 'warning', options.duration);
        }
    }

    /**
     * Exibe uma notifica√ß√£o de informa√ß√£o.
     * @param {string} title - T√≠tulo da notifica√ß√£o.
     * @param {string} message - Mensagem da notifica√ß√£o.
     * @param {Object} [options={}] - Op√ß√µes adicionais.
     */
    function showInfo(title, message, options = {}) {
        logger.info(`Notifica√ß√£o de Informa√ß√£o: ${title} - ${message}`, options);
        if (swalAvailable) {
            Swal.fire({
                title: title,
                text: message,
                icon: 'info',
                toast: options.toast || true,
                position: options.position || NOTIFICATION_CONFIG.position,
                timer: options.duration || NOTIFICATION_CONFIG.defaultToastDuration,
                timerProgressBar: true,
                showConfirmButton: false,
                ...options
            });
        } else {
            showFallbackNotification(title, message, 'info', options.duration);
        }
    }

    /**
     * Fun√ß√£o de fallback para exibir notifica√ß√µes se SweetAlert2 n√£o estiver dispon√≠vel.
     * Basicamente, loga no console e pode adicionar/remover uma div simples.
     * @param {string} title - T√≠tulo.
     * @param {string} message - Mensagem.
     * @param {string} type - Tipo (success, error, warning, info).
     * @param {number} duration - Dura√ß√£o em ms.
     */
    function showFallbackNotification(title, message, type, duration = 3000) {
        console.log(`[${type.toUpperCase()} Notification] ${title}: ${message}`);
        // Implemente uma l√≥gica de DOM simples aqui se quiser uma UI fallback.
        // Por exemplo, criar/mostrar um div flutuante com a classe 'notification type'.
        let fallbackDiv = document.getElementById('fallback-notification-div');
        if (!fallbackDiv) {
            fallbackDiv = document.createElement('div');
            fallbackDiv.id = 'fallback-notification-div';
            fallbackDiv.className = 'notification fallback-notification'; // Adicione estilos em components.css ou modern_main_css.css
            document.body.appendChild(fallbackDiv);
        }
        fallbackDiv.textContent = `${title}: ${message}`;
        fallbackDiv.className = `notification fallback-notification ${type} show`;
        
        setTimeout(() => {
            fallbackDiv.classList.remove('show');
            // fallbackDiv.remove(); // Opcional: remover do DOM
        }, duration);
    }

    /**
     * Atualiza o status da notifica√ß√£o offline na UI.
     */
    function updateOnlineStatus() {
        if (!offlineNotificationElement) {
            logger.warn('Elemento de notifica√ß√£o offline n√£o encontrado para atualiza√ß√£o.');
            return;
        }

        const isOnline = navigator.onLine;
        offlineNotificationElement.style.display = isOnline ? 'none' : 'flex'; // Usar flex para √≠cone/texto
        offlineNotificationElement.classList.toggle('show', !isOnline); // Adiciona/remove 'show' para anima√ß√£o

        if (isOnline) {
            logger.info('Status de rede: Online. Notifica√ß√£o offline escondida.');
        } else {
            logger.warn('Status de rede: Offline. Notifica√ß√£o offline vis√≠vel.');
        }
    }

    // Exp√µe a API p√∫blica do m√≥dulo
    return {
        init: init,
        showSuccess: showSuccess,
        showError: showError,
        showWarning: showWarning,
        showInfo: showInfo,
        updateOnlineStatus: updateOnlineStatus, // Para ser chamado externamente se necess√°rio
        config: NOTIFICATION_CONFIG // Exp√µe a configura√ß√£o
    };
})();
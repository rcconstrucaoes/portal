/**
 * RC Constru√ß√µes - M√≥dulo de Importa√ß√£o e Exporta√ß√£o de Dados (Revisado e Aprimorado)
 * Permite importar dados de arquivos (CSV, JSON) para o banco de dados local
 * e exportar dados do banco de dados para arquivos (CSV, JSON).
 * Aprimorado para ser robusto, com tratamento de erros, e integra√ß√£o com m√≥dulos core.
 */

(function() {
    'use strict';

    let logger;
    let databaseInstance;
    let utilsManager; // Para download de CSV (PapaParse) e outras utilities
    let eventHandler;
    // M√≥dulos de dados que podem ser importados/exportados (opcional, se precisarem de m√©todos espec√≠ficos)
    let clientsModule;
    let budgetsModule;
    let contractsModule;
    let financialModule;
    let usersModule; // Se houver um m√≥dulo de usu√°rios para importar/exportar

    const IMPORT_EXPORT_CONFIG = {
        supportedImportTypes: {
            'text/csv': 'csv',
            'application/json': 'json'
        },
        supportedExportTypes: ['csv', 'json'],
        // Mapeamento de tabelas para seus respectivos m√≥dulos (para adicionar dados)
        tableModules: {
            clients: null, // Ser√° preenchido com clientsModule
            budgets: null,
            contracts: null,
            financial: null,
            users: null // Assumindo que users tamb√©m √© um m√≥dulo import√°vel/export√°vel
        }
    };

    /**
     * Espera por uma depend√™ncia global estar dispon√≠vel.
     * @param {string} globalName - O nome da vari√°vel global a ser esperada.
     * @returns {Promise<any>} A inst√¢ncia da depend√™ncia.
     */
    async function waitForGlobal(globalName) {
        return new Promise(resolve => {
            const checkGlobal = () => {
                if (window[globalName]) {
                    resolve(window[globalName]);
                } else {
                    setTimeout(checkGlobal, 50); // Tenta novamente em 50ms
                }
            };
            checkGlobal();
        });
    }

    /**
     * Inicializa o M√≥dulo de Importa√ß√£o e Exporta√ß√£o.
     * @returns {Promise<void>}
     */
    async function init() {
        try {
            logger = await waitForGlobal('SystemLogger').then(sl => sl.getAppLogger('ImportExportModule'));
            databaseInstance = await waitForGlobal('Database').then(db => db.getInstance());
            utilsManager = await waitForGlobal('UtilsManager');
            eventHandler = await waitForGlobal('SystemEventHandler');

            // Preenche a configura√ß√£o com refer√™ncias aos m√≥dulos de dados
            IMPORT_EXPORT_CONFIG.tableModules.clients = await waitForGlobal('ClientsModule').catch(() => null);
            IMPORT_EXPORT_CONFIG.tableModules.budgets = await waitForGlobal('BudgetsModule').catch(() => null);
            IMPORT_EXPORT_CONFIG.tableModules.contracts = await waitForGlobal('ContractsModule').catch(() => null);
            IMPORT_EXPORT_CONFIG.tableModules.financial = await waitForGlobal('FinancialModule').catch(() => null);
            IMPORT_EXPORT_CONFIG.tableModules.users = await waitForGlobal('AuthManager').catch(() => null); // Pode usar AuthManager para users

            logger.info('üì•üì§ M√≥dulo de Importa√ß√£o/Exporta√ß√£o inicializado.');
        } catch (error) {
            console.error('Erro cr√≠tico ao inicializar ImportExportModule:', error);
            (logger || console).error('Falha na inicializa√ß√£o do ImportExportModule. Funcionalidades de import/export podem n√£o estar dispon√≠veis.');
        }
    }

    // --- FUN√á√ïES DE IMPORTA√á√ÉO ---

    /**
     * Importa dados de um arquivo para uma tabela espec√≠fica do banco de dados.
     * @param {File} file - O objeto File a ser importado.
     * @param {string} tableName - O nome da tabela de destino.
     * @returns {Promise<Object>} Resultado da importa√ß√£o { success: boolean, importedCount: number, errors: Array }.
     */
    async function importDataFromFile(file, tableName) {
        logger.info(`Iniciando importa√ß√£o do arquivo '${file.name}' para a tabela '${tableName}'.`);
        let importedCount = 0;
        const errors = [];

        if (!databaseInstance || databaseInstance.isFallback()) {
            errors.push('Banco de dados n√£o dispon√≠vel ou em modo fallback. Importa√ß√£o cancelada.');
            logger.error('Importa√ß√£o falhou: DB n√£o dispon√≠vel.');
            eventHandler.emit('import:error', { tableName, error: errors[0] });
            return { success: false, importedCount: 0, errors };
        }

        const fileType = file.type;
        const parserType = IMPORT_EXPORT_CONFIG.supportedImportTypes[fileType];

        if (!parserType) {
            errors.push(`Tipo de arquivo '${fileType}' n√£o suportado para importa√ß√£o.`);
            logger.warn('Importa√ß√£o falhou: Tipo de arquivo n√£o suportado.');
            eventHandler.emit('import:error', { tableName, error: errors[0] });
            return { success: false, importedCount: 0, errors };
        }

        try {
            const rawData = await readFileContent(file);
            let parsedData;

            if (parserType === 'csv') {
                const Papa = await waitForGlobal('Papa');
                if (!Papa || typeof Papa.parse !== 'function') {
                    throw new Error("Biblioteca PapaParse n√£o carregada para CSV.");
                }
                const parseResult = Papa.parse(rawData, {
                    header: true, // Assume que a primeira linha √© o cabe√ßalho
                    skipEmptyLines: true,
                    dynamicTyping: true // Tenta converter valores para tipos corretos (n√∫meros, booleanos)
                });
                if (parseResult.errors.length > 0) {
                    throw new Error(`Erros de parseamento CSV: ${JSON.stringify(parseResult.errors)}`);
                }
                parsedData = parseResult.data;
            } else if (parserType === 'json') {
                parsedData = JSON.parse(rawData);
            }

            if (!Array.isArray(parsedData) || parsedData.length === 0) {
                throw new Error('Nenhum dado v√°lido encontrado para importar ou formato de dados inv√°lido.');
            }
            
            // Tenta obter o m√≥dulo de dados apropriado para a tabela
            const targetModule = IMPORT_EXPORT_CONFIG.tableModules[tableName];
            if (!targetModule || typeof targetModule.add !== 'function') {
                 logger.warn(`M√≥dulo '${tableName}' n√£o encontrado ou n√£o tem m√©todo 'add'.`);
                 errors.push(`M√≥dulo de destino '${tableName}' n√£o pode adicionar dados.`);
                 return { success: false, importedCount: 0, errors };
            }

            // Importar os dados para o banco de dados local
            for (const record of parsedData) {
                // Adicione valida√ß√£o espec√≠fica para cada tipo de registro se necess√°rio
                // Ou o m√©todo 'add' do m√≥dulo j√° far√° a valida√ß√£o
                // Remove ID para que o banco de dados gere um novo, a menos que voc√™ queira usar IDs de importa√ß√£o
                const recordToSave = { ...record };
                delete recordToSave.id; 
                delete recordToSave.syncStatus; // Remover status de sync de dados importados

                // Usar o m√©todo 'add' do m√≥dulo espec√≠fico para valida√ß√£o e l√≥gica de neg√≥cio
                const addedRecord = await targetModule.add(recordToSave);
                if (addedRecord) {
                    importedCount++;
                } else {
                    errors.push(`Falha ao importar registro: ${JSON.stringify(recordToSave)}`);
                }
            }

            if (importedCount > 0) {
                logger.success(`Importa√ß√£o conclu√≠da: ${importedCount} registros importados com sucesso para '${tableName}'.`);
                eventHandler.emit('import:success', { tableName, importedCount, totalRecords: parsedData.length });
                return { success: true, importedCount, errors };
            } else {
                errors.push('Nenhum registro foi importado.');
                logger.warn('Importa√ß√£o conclu√≠da, mas nenhum registro importado.');
                eventHandler.emit('import:completeWithWarnings', { tableName, importedCount, totalRecords: parsedData.length, errors });
                return { success: false, importedCount, errors };
            }

        } catch (error) {
            logger.error(`Erro durante o processo de importa√ß√£o para '${tableName}': ${error.message}`, error);
            errors.push(`Erro fatal na importa√ß√£o: ${error.message}`);
            eventHandler.emit('import:error', { tableName, error: errors[0] });
            return { success: false, importedCount, errors };
        }
    }

    /**
     * L√™ o conte√∫do de um arquivo.
     * @param {File} file - O objeto File.
     * @returns {Promise<string>} O conte√∫do do arquivo como string.
     */
    function readFileContent(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (event) => resolve(event.target.result);
            reader.onerror = (event) => reject(new Error(`Erro ao ler o arquivo: ${event.target.error}`));
            reader.readAsText(file);
        });
    }

    // --- FUN√á√ïES DE EXPORTA√á√ÉO ---

    /**
     * Exporta dados de uma tabela espec√≠fica para um arquivo.
     * @param {string} tableName - O nome da tabela a ser exportada.
     * @param {string} format - O formato de exporta√ß√£o ('csv' ou 'json').
     * @returns {Promise<boolean>} True se a exporta√ß√£o foi bem-sucedida.
     */
    async function exportDataToFile(tableName, format) {
        logger.info(`Iniciando exporta√ß√£o da tabela '${tableName}' no formato '${format}'.`);

        if (!databaseInstance || databaseInstance.isFallback()) {
            logger.error('Exporta√ß√£o falhou: Banco de dados n√£o dispon√≠vel ou em modo fallback.');
            eventHandler.emit('export:error', { tableName, error: 'DB n√£o dispon√≠vel.' });
            return false;
        }
        if (!IMPORT_EXPORT_CONFIG.supportedExportTypes.includes(format)) {
            logger.warn(`Formato de exporta√ß√£o '${format}' n√£o suportado.`);
            eventHandler.emit('export:error', { tableName, error: `Formato '${format}' n√£o suportado.` });
            return false;
        }

        try {
            const data = await databaseInstance.table(tableName).toArray();
            if (data.length === 0) {
                logger.warn(`Tabela '${tableName}' est√° vazia. Nada para exportar.`);
                eventHandler.emit('export:completeWithWarnings', { tableName, message: 'Tabela vazia.' });
                return false;
            }

            const filename = `${tableName}_export_${utilsManager.formatDate(Date.now(), 'YYYYMMDD_HHmmss')}.${format}`;

            if (format === 'csv') {
                await utilsManager.downloadCSV(data, filename); // Usa o utilit√°rio de download CSV
            } else if (format === 'json') {
                const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json;charset=utf-8;' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.setAttribute('download', filename);
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
            logger.success(`Dados da tabela '${tableName}' exportados com sucesso para '${filename}'.`);
            eventHandler.emit('export:success', { tableName, format, filename });
            return true;
        } catch (error) {
            logger.error(`Erro ao exportar dados da tabela '${tableName}': ${error.message}`, error);
            eventHandler.emit('export:error', { tableName, format, error: error.message });
            return false;
        }
    }

    /**
     * Exporta o banco de dados inteiro para um arquivo JSON, incluindo todas as tabelas.
     * @param {string} filename - O nome do arquivo a ser salvo (ex: 'rc_database_backup.json').
     * @returns {Promise<boolean>} True se o backup foi bem-sucedido.
     */
    async function exportFullDatabase(filename = 'rc_database_backup.json') {
        logger.info('Iniciando exporta√ß√£o completa do banco de dados para JSON.');
        if (!databaseInstance || databaseInstance.isFallback()) {
            logger.error('Backup de banco de dados falhou: DB n√£o dispon√≠vel ou em modo fallback.');
            eventHandler.emit('export:error', { tableName: 'all', error: 'DB n√£o dispon√≠vel.' });
            return false;
        }

        try {
            const fullData = {};
            const tableNames = Object.keys(databaseInstance.schemas[databaseInstance.verno]); // Obt√©m nomes das tabelas do schema atual
            
            for (const tableName of tableNames) {
                try {
                    fullData[tableName] = await databaseInstance.table(tableName).toArray();
                } catch (e) {
                    logger.warn(`N√£o foi poss√≠vel exportar a tabela '${tableName}': ${e.message}. Continuando...`);
                    fullData[tableName] = []; // Adiciona uma array vazia se n√£o puder exportar a tabela
                }
            }

            const blob = new Blob([JSON.stringify(fullData, null, 2)], { type: 'application/json;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.setAttribute('download', filename);
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            logger.success(`Backup completo do banco de dados exportado com sucesso para '${filename}'.`);
            eventHandler.emit('export:fullDatabaseSuccess', { filename });
            return true;
        } catch (error) {
            logger.error(`Erro ao exportar banco de dados completo: ${error.message}`, error);
            eventHandler.emit('export:error', { tableName: 'all', error: error.message });
            return false;
        }
    }


    // Exp√µe a API p√∫blica do m√≥dulo
    return {
        init: init,
        importData: importDataFromFile, // Para importar para uma tabela espec√≠fica
        exportData: exportDataToFile,   // Para exportar uma tabela espec√≠fica
        exportFullDatabase: exportFullDatabase, // Para backup completo do DB
        config: IMPORT_EXPORT_CONFIG
    };
})();